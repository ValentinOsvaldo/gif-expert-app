{"version":3,"sources":["components/AddCategory.js","Helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","ok","Error","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","image","GifExpertApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAkCeA,EA/BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAczC,OACE,sBAAMC,SARa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,GAC7BR,GAAc,SAACS,GAAD,OAAkBP,GAAlB,mBAAgCO,QAIhD,SACE,uBACEC,KAAK,OACLC,YAAY,WACZC,MAAOV,EACPW,SAjBoB,SAACR,GACzBF,EAAcE,EAAES,OAAOF,a,+BCaZG,EApBF,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACRC,EADQ,iDACwCC,UAClDH,GAFU,+DAIAI,MAAMF,GAJN,cAIZG,EAJY,gBAKKA,EAAIC,OALT,mBAKVC,EALU,EAKVA,KAEEC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAIjCG,EAAIU,GAfK,uBAeK,IAAIC,MAAM,SAff,iCAiBPR,GAjBO,4CAAH,sDCqBES,EAlBM,SAACjB,GAAc,IAAD,EACPf,mBAAS,CACjCsB,KAAM,GACNW,SAAS,IAHsB,mBAC1BC,EAD0B,KACnBC,EADmB,KAejC,OATAC,qBAAU,WACRtB,EAAQC,GAAUsB,MAAK,SAACC,GACtBH,EAAS,CACPb,KAAMgB,EACNL,SAAS,SAGZ,CAAClB,IAEGmB,GCLMK,EAXK,SAAC,GAAuB,EAArBb,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAChC,OACE,yBAAQuB,UAAU,yCAAlB,UACE,qBAAKC,IAAKxB,EAAKyB,IAAKf,IACpB,4BAAYa,UAAU,YAAtB,SACE,4BAAIb,UCeGgB,EAlBC,SAAC,GAAkB,IAAhB5B,EAAe,EAAfA,SAAe,EACEiB,EAAajB,GAAjCa,EADkB,EACxBN,KAAcW,EADU,EACVA,QAEtB,OACE,qCACE,oBAAIO,UAAU,oCAAd,SAAmDzB,IAElDkB,GAAW,oBAAIO,UAAU,oCAAd,wBAEZ,yBAASA,UAAU,YAAnB,SACGZ,EAAOJ,KAAI,SAACoB,GAAD,OACV,cAAC,EAAD,eAAgCA,GAAdA,EAAMlB,aCWnBmB,EAtBM,WAAO,IAAD,EACW7C,mBAAS,CAAC,UADrB,mBAClBQ,EADkB,KACNT,EADM,KAGzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBAEA,kCACGS,EAAWgB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAEEA,SAAWA,GADLA,Y,MCXlB+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6c4f3925.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2)\r\n      setCategories((categories) => [ inputValue,...categories]);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Category\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n}\r\n\r\n\r\nexport default AddCategory;\r\n","const getGifs = async ( category ) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n      category\r\n    )}&limit=10&api_key=Yla3TUzFNRLW0394Wa5N6iOntCjZRvvL`,\r\n    res = await fetch(url),\r\n    { data } = await res.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  if (!res.ok) throw new Error(\"Error\");\r\n\r\n  return gifs;\r\n};\r\n\r\nexport default getGifs;\r\n","import { useEffect, useState } from \"react\";\r\nimport getGifs from \"../Helpers/getGifs\";\r\n\r\nconst useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n\r\nexport default useFetchGifs;\r\n","import React from \"react\";\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <figure className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <figcaption className=\"card-name\">\r\n        <p>{title}</p>\r\n      </figcaption>\r\n    </figure>\r\n  );\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React from \"react\";\r\nimport useFetchGifs from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n      {loading && <h2 className=\"animate__animated animate__fadeIn\">Loading...</h2>}\r\n\r\n      <article className=\"container\">\r\n        {images.map((image) => (\r\n          <GifGridItem key={image.id} {...image} />\r\n        ))}\r\n      </article>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"hello\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n\r\n      <hr />\r\n\r\n      <section>\r\n        {categories.map((category) => (\r\n          <GifGrid \r\n            key={ category }\r\n            category={ category } \r\n          />\r\n        ))}\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GifExpertApp from './GifExpertApp';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode> \r\n    <GifExpertApp /> \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}